package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Supplier;

public abstract class AbstractRepository<T> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final String classShortName;

    public AbstractRepository(Supplier<T> modelConstructor) {
        this.modelConstructor = modelConstructor;
        this.classShortName = modelConstructor.get().getClass().getSimpleName();
    }

    protected T find(long id) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM " + classShortName + " WHERE id=?")) {
                statement.setLong(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toModel(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + classShortName, e);
        }
    }

    protected T toModel(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }
        T obj = modelConstructor.get();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            final String field = metaData.getColumnName(i);
            final String capitalizeFirstLetter = field.substring(0, 1).toUpperCase() + field.substring(1);
            try {
                List<Method> methodList = Arrays.stream(obj.getClass().getMethods()).filter(
                        m -> m.getName().equals("set" + capitalizeFirstLetter)).toList();
                if (methodList.isEmpty()) {
                    continue;
                }
                Method setter = methodList.get(0);
                Method getter = resultSet.getClass().getMethod("getObject", int.class);
                setter.invoke(obj, getter.invoke(resultSet, i));
            } catch (InvocationTargetException | IllegalAccessException | NoSuchMethodException e) {
                throw new RepositoryException("Can't create instance of " + classShortName, e);
            }
        }
        return obj;
    }

    protected void save(String request, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(request, Statement.RETURN_GENERATED_KEYS)) {
                beforeSave(statement, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + classShortName);
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        afterSave(generatedKeys, args);
                    } else {
                        throw new RepositoryException("Can't save " + classShortName + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + classShortName, e);
        }
    }

    public List<T> doSQLRequest(String request, Object... args) {
        List<T> result = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(request)) {
                for (int i = 0; i < args.length; i++) {
                    statement.setObject(i + 1, args[i]);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    T obj;
                    while ((obj = toModel(statement.getMetaData(), resultSet)) != null) {
                        result.add(obj);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + classShortName, e);
        }
        return result;
    }

    public long count(String request) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(request)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getLong(1);
                    }
                    throw new RepositoryException("Can`t count numbers of " + classShortName + "with request:" + request);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't count.", e);
        }
    }

    protected T firstOrNull(List<T> list) {
        return list.isEmpty() ? null : list.get(0);
    }

    abstract protected void beforeSave(PreparedStatement statement, Object[] args) throws SQLException;
    abstract protected void afterSave(ResultSet generatedKeys, Object[] args) throws SQLException;
    private final Supplier<T> modelConstructor;
}
